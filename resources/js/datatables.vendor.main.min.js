$.fn.dataTable.Api.register('_drawCallback()', function ()
{
    if (this.hasSummaryActive())
    {
        alert('manzaz');
        window.populateFilteredColumnValues(this);
    }

    if (this.getDataAttribute('showDuplicates'))
        window.__showTableDuplicates(this);

    // this.columns.adjust();
});

$.fn.dataTable.Api.register('column().getTableNode()', function ()
{
    return $(this.header()).parents('table');
});

$.fn.dataTable.Api.register('column().getDataTable()', function ()
{
    return this.getTableNode().DataTable();
});

$.fn.dataTable.Api.register('column().launchDraw()', function ()
{
    console.log('draw lanciato su ' + this.index());

    let column = this;

    let tableNode = column.getDataTable();

    clearTimeout(window.searchTimeout);

    let timeInterval = (tableNode.settings()[0].searchDelay)? tableNode.settings()[0].searchDelay : 350;

    window.searchTimeout = setTimeout(function ()
    {
        console.log('scrivo');
        column.draw();
    }, timeInterval);
});

$.fn.dataTable.Api.register( 'getTableElement()', function ()
{
    return $(this.table().container()).children('table').first();
} );

$.fn.dataTable.Api.register('column().getHeaderData()', function (dataName)
{
    if(typeof $(this.header()).data(dataName) === 'undefined')
        return false;

    return $(this.header()).data(dataName);
});


$.fn.dataTable.Api.register('getDataAttribute()', function (dataName, table = null)
{
    if(! table)
        table = this.getTableElement();

    if(typeof table.data(dataName) === 'undefined')
      return false;

    return table.data(dataName);
});

window.addParameterToURL = function(url, paramName, paramValue)
{
    url += (url.split('?')[1] ? '&':'?') + paramName + '=' + paramValue;

    return url;
}

window.reloadDatatable = function(table)
{
    table.ajax.reload(function ()
    {
        // window.__showTableDuplicates(table);
    });
}



$(document).ready(function($)
{
    $('body').on('click', '.ib-dt-alert-cell', function (e)
    {
        UIkit.modal.dialog($(this).attr('title'));
    });

    $('.wannabedatatable').each(function()
    {
        let tableId = $(this).attr('id');
        let columnDefs = window[tableId + 'columnDefs'];
        let rowReorder = window[tableId + 'rowReorder'];
        let options = window[tableId + 'options'];
        let buttons = window[tableId + 'buttons'];

        let settings = {
            processing: true,
            orderCellsTop: true,
            searchDelay: 450,
            lengthMenu: [[10, 25, 50, 100, 250, 500, -1], [10, 25, 50, 100, 250, 500, "All"]],
            columnDefs : columnDefs,
            rowReorder : rowReorder,
            buttons: {
                dom: {
                    button: {
                        className: 'uk-button uk-button-small'
                    }
                },
                buttons: buttons
            },
            initComplete: function ()
            {
                if (typeof $('#' + tableId).data('sticky') !== 'undefined')
                    UIkit.sticky($('#' + tableId + '_wrapper').find('.' + $('#' + tableId).data('sticky')), {bottom: true});

                this.api().applyTableFilters();

                if(typeof window[tableId + 'options'].caption !== 'undefined')
                    $('#' + tableId + '_wrapper .tablecaption').html(window[tableId + 'options'].caption);

                $('#' + tableId + '_wrapper .dataTables_length select').addClass('uk-select');
                $('#' + tableId + '_filter input').addClass('uk-input').attr('placeholder', window[tableId + 'options'].language.searchPlaceholder);
            },
            drawCallback: function(settings)
            {
                var api = this.api();

                api._drawCallback();
            }
        };

        jQuery.extend(settings, options);

        window['table' + tableId] = $(this).DataTable(settings)
            .on('key-blur', function ( e, datatable, cell ) {
                $(cell.node()).find('input').blur();
                $(cell.node()).find('select').blur();
            })
            // .on( 'preDraw', function () {
            //     startTime = new Date().getTime();
            // } )
            // .on( 'draw.dt', function () {
            //     console.log( 'Redraw took at: '+(new Date().getTime()-startTime)+'mS' );
            // } )
            .on('key-focus', function ( e, datatable, cell ) {

                setTimeout(function()
                {
                    $(cell.node()).find('input').focus();
                }, 150);
            });
    });    
});








$(document).ready(function($)
{
    // $('input', section).on('keypress change click clear', function ()
    // {
    //     window.__filterByColumnValue(table, this, container, section, searchValue);
    // });


    $('body').on( 'mouseenter', '.uk-text-truncate', function(){
        var $this = $(this);

        if(this.offsetWidth < this.scrollWidth && !$this.attr('title')){
            $this.attr('title', $this.text());
            UIkit.tooltip($this, {title: $this.text()}).show();
        }
    });



});   
