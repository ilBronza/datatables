$.fn.dataTable.Api.register('canDrawOnEvents()', function (value)
{
    return this.getDataAttribute('filter-draw-on-events');
});

$.fn.dataTable.Api.register('column().canTableDrawOnEvents()', function (value)
{
    return this.getTableNode().DataTable().canDrawOnEvents();
});

$.fn.dataTable.Api.register('column().canDrawOnKeyup()', function (value)
{
    return this.getHeaderData('filter-draw-on-events');
});

$.fn.dataTable.Api.register('column().orSearch()', function (value)
{
    this.search(value, true, false);
});

$.fn.dataTable.Api.register('column().hasRangeFilter()', function ()
{
    return this.getHeaderData('range-filter');
});

$.fn.dataTable.Api.register('column().hasFilter()', function ()
{
    return this.getHeaderData('filterable');
});

$.fn.dataTable.Api.register('column().hasTextFilter()', function ()
{
    return this.getHeaderData('filter-type') == 'text';
});

$.fn.dataTable.Api.register('column().hasDateFilter()', function ()
{
    return this.getHeaderData('filter-type') == 'date';
});

$.fn.dataTable.Api.register('column().hasNoneFilter()', function ()
{
    return this.getHeaderData('filter-type') == 'none';
});

$.fn.dataTable.Api.register('column().getJqueryFilterEvents()', function ()
{
    return this.getHeaderData('filter-events');
});

$.fn.dataTable.Api.register('column().applyTextFilter()', function ()
{
    return this.applyFilterCallback(function(source)
    {
        return $(source).val();
    });
});

$.fn.dataTable.Api.register('column().applyDateFilter()', function ()
{
    return this.applyFilterCallback(function(source)
    {
        //date is formatted because of timestamped source
        return $(source).val();
        // return new Date($(source).val()).getTime() / 1000;
    });
});

$.fn.dataTable.Api.register('column().applyRangeFilter()', function ()
{
    if(this.hasTextFilter())
        return this.applyTextFilter();

    if(this.hasDateFilter())
        return this.applyDateFilter();

    if(this.hasNoneFilter())
        return false;

    alert('nessun filtro trovato per colonna ' + this.index() + ' tipo ' + this.getHeaderData('filter-type'));
});

$.fn.dataTable.Api.register('column().applyNormalFilter()', function ()
{
    if(this.hasTextFilter())
        return this.applyTextFilter();

    if(this.hasDateFilter())
        return this.applyDateFilter();

    if(this.hasNoneFilter())
        return false;

    alert('nessun filtro trovato per colonna ' + this.index() + ' tipo ' + this.getHeaderData('filter-type'));
});

$.fn.dataTable.Api.register('applyTableFilters()', function (dataName)
{
    let api = this;
    this.columns().every(function ()
    {
        if(! this.hasFilter())
            return false;

        if(this.hasRangeFilter())
            return this.applyRangeFilter(this);

        return this.applyNormalFilter(this);
    });
});





$.fn.dataTable.Api.register('column().applyFilterCallback()', function (callback)
{
    let events = this.getJqueryFilterEvents();
    let column = this;
    let tableNode = this.getDataTable();

    $(this.header()).find('input').on(events, function()
    {
        console.log('setto ricerca: "' + callback(this) + '" sulla colonna ' + column.getLabel());
        column.orSearch(callback(this));

        if(! column.canTableDrawOnEvents())
            return false;

        console.log('canTableDrawOnEvents');

        if(column.canDrawOnEvents())
            column.launchDraw();

    });

    if((column.canDrawOnKeyup())&&(column.canTableDrawOnEvents()))
        // this.setTimedDraw();
    {
        // console.log('imposto keyup su ' + column.index());

        $(column.header()).find('input').on('keyup', function()
        {
            column.launchDraw();
        });
    }
    // else
    //     console.log('non posso impostare keyup su colonna ' + column.index());
});










$(document).ready(function($)
{
    $('body').on('mouseenter', '.datatablefilter', function()
    {
        $(this).find('.filterfunctions').removeClass('uk-hidden');
    });

    $('body').on('mouseleave', '.datatablefilter', function()
    {
        $(this).find('.filterfunctions').addClass('uk-hidden');
    });

    $('.filterfunctions .removefiltercontent').click(function (e)
    {
        e.stopPropagation();

        $(this).closest('.datatablefilter').find('input, select, textarea').each(function()
        {
            $(this).val('');
            $(this).change();
            $(this).removeClass('filter-filled');
        });
    });

    $('th input').click(function(e)
    {
        e.stopPropagation();
    });

    $('input[type="date"]').change(function()
    {
        $(this).data('timestamp', new Date($(this).val()).getTime() / 1000);
    });
    
    // window.normalFilter = function (table, container, section)
    // {
    //     window._filter(table, container, section, true);
    // }

    // window.rangeFilter = function (table, container, section)
    // {
    //     window._filter(table, container, section);
    // }

    // window._filterByEnter = function(table, container, section, searchValue)
    // {
    //     $('input', section).on('keypress', function (e)
    //     {
    //         if(e.which == 13)
    //         {
    //             e.preventDefault();
    //             e.stopPropagation();

    //             console.log('de dio');
    //             table.draw();                
    //         }

    //         window.__filterByColumnValue(table, this, container, section, searchValue, false);
    //     });
    // }

    // window.__filterByColumnValue = function(table, target, container, section, searchValue, draw = true)
    // {
    //     let previousValue = $(target).data('value')? $(target).data('value') : '';

    //     let value = $(target).val().toLowerCase();

    //     if($(target).attr('type') == 'date')
    //         value = new Date(value).getTime() / 1000;

    //     $(target).data('value', value);

    //     // if(container.search() !== value)
    //     // {
    //         if(searchValue)
    //         {
    //             if(previousValue == value)
    //               return false;

    //             clearTimeout(window.searchTimeout);

    //             let timeInterval = (container.settings()[0].searchDelay)? container.settings()[0].searchDelay : 350;

    //             window.searchTimeout = setTimeout(function ()
    //             {
    //                 console.log(container);

    //                 container.search(value, true, false);

    //                 if(draw)
    //                     table.draw();
    //             }, timeInterval);
    //         }

    //         // else
    //         //     container.draw();
    //     // }        
    // }

    // window.__filterByNormalBehaviour = function(table, container, section, searchValue)
    // {
    //     $('input', section).on('keypress change click clear', function ()
    //     {
    //         window.__filterByColumnValue(table, this, container, section, searchValue);
    //     });
    // }

    // window._filter = function (table, container, section, searchValue = false)
    // {
    //     // let filterOnEnter = true;
    //     let filterOnEnter = false;

    //     if(filterOnEnter)
    //         return window._filterByEnter(table, container, section, searchValue);

    //     return window.__filterByNormalBehaviour(table, container, section, searchValue);
    // }

});